        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <locale>
        -:    4:#include <cctype>
        -:    5:#include <cwctype>
        -:    6:
        -:    7:using std::string;
        -:    8:
        -:    9:/*
        -:   10:  The function receives a string counts how many times the same character 
        -:   11:  occurs at the beginning of the string, before any other characters (or the
        -:   12:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   13:  'z' and any ASCII characters are allowed.
        -:   14:*/
function _ZN8PasswordC2Ev called 23 returned 100% blocks executed 53%
       23:   15:Password::Password() {
call    0 returned 23
       23:   16:  pass_history.push_back("ChicoCA-95929");
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 23
branch  5 taken 23 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 23
call    8 returned 23
call    9 never executed
call   10 never executed
       23:   17:}
call    0 never executed
        -:   18:
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 14 returned 100% blocks executed 100%
       14:   19:int Password::count_leading_characters(string phrase){
        -:   20:  
       14:   21:  if(phrase.length() == 0) return 0;
call    0 returned 14
branch  1 taken 1 (fallthrough)
branch  2 taken 13
        -:   22:  
       13:   23:  int repetition = 1;
       13:   24:  int index = 0;
        -:   25:
       35:   26:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 35
branch  1 taken 31 (fallthrough)
branch  2 taken 4
call    3 returned 31
call    4 returned 31
branch  5 taken 22 (fallthrough)
branch  6 taken 9
branch  7 taken 22
branch  8 taken 13 (fallthrough)
       22:   27:    repetition++;
       22:   28:    index++;
        -:   29:  }
       13:   30:  return repetition;
        -:   31:}
        -:   32:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 15 returned 100% blocks executed 100%
       15:   33:bool Password::has_mixed_case(string phrase) {
       15:   34:  if(phrase.length() == 0) return false;
call    0 returned 15
branch  1 taken 2 (fallthrough)
branch  2 taken 13
       13:   35:  bool hasUppercase = false;
       13:   36:  bool hasLowercase = false;
       81:   37:  for(int i = 0; i < phrase.length(); i++) {
call    0 returned 81
branch  1 taken 72
branch  2 taken 9 (fallthrough)
       72:   38:    if(std::islower(phrase[i])) hasLowercase = true;
call    0 returned 72
branch  1 taken 37 (fallthrough)
branch  2 taken 35
       72:   39:    if(std::isupper(phrase[i])) hasUppercase = true;
call    0 returned 72
branch  1 taken 10 (fallthrough)
branch  2 taken 62
       72:   40:    if (hasUppercase && hasLowercase) break;
branch  0 taken 18 (fallthrough)
branch  1 taken 54
branch  2 taken 4 (fallthrough)
branch  3 taken 14
        -:   41:  }
       13:   42:  return hasUppercase && hasLowercase;
branch  0 taken 7 (fallthrough)
branch  1 taken 6
branch  2 taken 4 (fallthrough)
branch  3 taken 3
        -:   43:}
        -:   44:
        -:   45:/*
        -:   46:  receives a password and sets the latest in pass_history to it if and only
        -:   47:  if it meets all criteria:
        -:   48:    1. The password is at least 8 letters long
        -:   49:    2. It has no more than 3 of the same leading characters
        -:   50:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   51:    4. It was not a previous password in the history
        -:   52:*/
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 80%
        6:   53:void Password::set(string phrase) {
        6:   54:  int passwordLength = phrase.length();
call    0 returned 6
        6:   55:  int leadingCharacters = count_leading_characters(phrase);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 6
call    5 never executed
call    6 never executed
        6:   56:  bool hasMixedCase = has_mixed_case(phrase);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 6
call    5 never executed
        -:   57:
        6:   58:  bool previouslyUsed = false;
        6:   59:  if(passwordLength >= 8 && leadingCharacters <= 3 && hasMixedCase) {
branch  0 taken 4 (fallthrough)
branch  1 taken 2
branch  2 taken 3 (fallthrough)
branch  3 taken 1
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        4:   60:    for(int i = 0; i < (int)pass_history.size(); i++){
call    0 returned 4
branch  1 taken 2
branch  2 taken 2 (fallthrough)
        2:   61:      if(pass_history[i] == phrase) {
call    0 returned 2
call    1 returned 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:   62:        previouslyUsed = true;
    #####:   63:        break;
        -:   64:      }
        -:   65:    }
        2:   66:  } else {
        4:   67:    return;
        -:   68:  }
        2:   69:  if(!previouslyUsed) {
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   70:    pass_history.push_back(phrase);
call    0 returned 2
        -:   71:  }
        2:   72:  return;
        -:   73:}
        -:   74:
        -:   75:/*
        -:   76:  receives a string and authenticates it against the latest password in the
        -:   77:  pass_history, returning true for an exact match or false when it does not match
        -:   78:  or if a password has not been set.
        -:   79:*/
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 91%
        6:   80:bool Password::authenticate(string phrase) {
       6*:   81:  if (pass_history.size() == 0) return false;
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        6:   82:  return pass_history[pass_history.size() - 1 ] == phrase ? true : false;
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 2 (fallthrough)
branch  4 taken 4
        -:   83:}
